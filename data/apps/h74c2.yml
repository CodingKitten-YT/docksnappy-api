version: '3.8'

services:
  web:
    image: 'your-web-app-image:latest' # Replace with your specific Web Portal Docker image
    build:
      context: ./path-to-web-app-source-code
      dockerfile: Dockerfile
    ports:
      - "8080:80" # Expose port 80 on the host, mapping it to port 80 in the container
    command: npm run start # Command to start your Web Portal, if it's a Node.js app
    depends_on:
      - db
    environment:
      - NODE_ENV=production
      # Add other environment variables as needed
    volumes:
      - ./path-to-web-app-source-code:/app/src/app # Mapping local code to container's code for live reload and updates
      - web-portal-data:/data # Define a named volume for persistent storage (if needed)
    expose:
      - "443" # If your app uses HTTPS on port 443

  db:
    image: 'postgres:12' # Replace with the PostgreSQL image you want to use
    volumes:
      - db-data:/var/lib/postgresql # Define a named volume for persistent database storage
    environment:
      - POSTGRES_DB=webportaldb # Your database name
      - POSTGRES_USER=webuser # Your database user
      - POSTGRES_PASSWORD=yourpassword # Your database password

  redis:
    image: 'redis:6-alpine' # Redis cache image
    volumes:
      - redis-data:/data # Define a named volume for persistent Redis data (if needed)

networks:
  default:
    driver: bridge

volumes:
  web-portal-data:
  db-data:
  redis-data:

# Optional: If you need to configure external secrets or configurations, uncomment the following lines
# config:
#   source: ./config # Path to configuration files that should be copied into the container
# secrets:
#   - src: ./secrets # Path to secrets files that should be bound to the container as environment variables