version: '3.8'

services:
  datasette:
    image: datasette/datasette:latest
    user: datasette
    ports:
      - "8008:8000" # HTTP web server on port 8000, or use the default (80).
      - "8009:8001" # WebSocket proxy server on port 8001.
    volumes:
      - .datasette:/data/datasette
      - ./datasette.yaml:/data/datasette/datasette.yaml
    environment:
      JUPYTERHUB_API_TOKEN: 'secret' # Set the JupyterHub API token for authentication.
      NODE_ENV: development # Run Datasette in development mode. Use production for a production setup.
      DATASETTE_INITIAL_SCHEMAS: "public,my_custom_schema" # List of schemas to initialize with.
    depends_on:
      - postgres

  postgres:
    image: postgres:latest
    volumes:
      - .postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: datasette # The default database name.
      POSTGRES_USER: datasette # The default user name.
      POSTGRES_PASSWORD: secret # The default password for the above user.
    healthcheck:
      test: ["cmd", "pg_isready", "-U", "datasette"]
      timeout: 5s
      retries: 10

# (Optional) If you're using a custom image of Datasette, you can define it here:
# datasette:
#   image: my-private-datasette-image:latest

# (Optional) If you want to use a persistent volume for data:
# volumes:
#   datasette_data:
#     driver: local
#   postgres_data:
#     driver: local
# services:
#   datasette:
#     volumes:
#       - datasette_data:/data/datasette
#   postgres:
#     volumes:
#       - postgres_data:/var/lib/postgresql/data

# (Optional) If you want to configure JupyterHub with Datasette, uncomment the following and adjust as needed.
# services:
#   jupyterhub:
#     image: jupyterhub/jupyterhub:latest
#     user: jupyter
#     volumes:
#       - .jupyterhub:/data/jupyterhub
#     environment:
#       JUPYTERHUB_CONFIG: "/data/jupyterhub/config.py"
#       JUPYTERHUB_API_TOKEN: 'secret'