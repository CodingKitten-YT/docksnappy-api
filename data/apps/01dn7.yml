version: '3.8'

services:
  app:
    image: openbudgeteer/openbudgeteer:latest
    ports:
      - "8000:8000" # HTTP interface
    environment:
      SECRET_KEY: secret_key_goes_here # Set a secret key for Django's session framework
      DJANGO_DEFAULT_LANGUAGE: en  # Default language code (as per the Django documentation)
      DJANGO_SITE_ID: 'opbudgeteer.example.com'  # The default site configuration domain. Change to your domain.
      POSTMARK_SERVER_TOKEN: postmark_token_goes_here  # Postmark token for emails if you're using it.
      EMAIL_BACKEND: 'django.core.mail.backends.smtp.EmailBackend'
      EMAIL_HOST: 'smtp.your-email-provider.com'
      EMAIL_PORT: 587
      EMAIL_USE_TLS: true
      EMAIL_HOST_USER: your-email@example.com
      EMAIL_HOST_PASSWORD: email-host-password
    volumes:
      - ./data:/code/openbudgeteer/data  # Path to the folder where you want to store the database and files
    depends_on:
      - db
      - rabbitmq

  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: openbudgeteer  # Database name for OpenBudgeteer
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password  # You should set this in an environment variable or secret management tool like HashiCorp Vault, not in the file!
    volumes:
      - db_data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:latest

volumes:
  db_data:

# For Celery task queue integration with RabbitMQ
celery_worker_image: celery:latest

# Define a new service for the Celery worker using the same image as above
celery_worker:
  image: celery_worker_image
  depends_on:
    - app  # Ensure that the main app is up before starting the Celery worker.
  environment:
    CELERY_BROKER_URL: amqp://rabbitmq:5672   # The default connection URL for RabbitMQ.
    CELERY_RESULT_BACKEND: db        # Store results behind a database.