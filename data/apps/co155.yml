1 version: '3.8'
2 services:
  mattermost:
    image: mattermost:latest # or specify a particular tag if needed
    container_name: mattermost
    ports:
      - "8060:8060"
    volumes:
      - ./mattermost-data:/data
      - ./mattermost-log:/root/.logscale
    environment:
      EULA_ACCEPTED: 'true'
      PP_VERSION: '1.0.2' # (Optional) Pin the PostgreSQL version
      MM_LICENSE_KEY: 'your_license_key' # (Optional) If you have a paid plan, use your license key for feature access
    command: >
      start --config=/config.json --data=/data --log-level=INFO
      --log-file-path=/root/.logscale/mattermost.log --webhook-enabled=true
  postgres:
    image: postgres:latest # or specify a particular tag if needed
    container_name: mattermost_db
    volumes:
      - ./mattermost-data/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: mattermost
      POSTGES_USER: mattermost
      POSTGRES_PASSWORD: mattermost_password # Replace with a strong password
  redis:
    image: redis:latest # or specify a particular tag if needed
    container_name: mattermost_redis

This `docker-compose.yml` file sets up Mattermost with Postgres and Redis as backing services. It includes the following components:

1. A Mattermost server, which handles the chat functionality.
2. A PostgreSQL database to store Mattermost data.
3. A Redis instance for caching and queueing messages.

Make sure to replace `MM_LICENSE_KEY` with your actual license key if you're using a paid plan. Also, ensure that the `./mattermost-data`, `./mattermost-log`, and `./mattermost-data/postgres` directories exist on your host machine as these are used for data persistence.

Additionally, configure the `POSTGRES_PASSWORD` with a secure password for your database to prevent unauthorized access. Adjust the image tags under `image` if you want to use specific versions of Mattermost, PostgreSQL, or Redis.