version: '3.8'

services:
  matching_api:
    image: 'matching/api:latest' # Use the specific image you want to deploy
    ports:
      - '8080:8080' # Expose the API on port 8080 of the host
    depends_on:
      - 'postgres'
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: matching_user
      POSTGRES_PASSWORD: matching_password
      POSTGRES_DB: matching_db
      SKIP_CREATE_DB: "1" # Set to '1' to skip database creation on startup if it exists

  postgres:
    image: 'postgres:latest' # Use the specific PostgreSQL image you want to deploy
    environment:
      POSTGRES_USER: matching_user
      POSTGRES_PASSWORD: matching_password
      POSTGRES_DB: matching_db
    volumes:
      - 'postgres_data:/var/lib/postgresql/data' # Persist database data

  celery_worker:
    image: 'matching/celery-worker:latest' # Use the specific Celery worker image you want to deploy
    environment:
      CELERY_RESULT_BACKEND: rabbitmq
      CELERY_TASK_QUEUES: (results,),
      CELERY_TASK_ROUTES: (matching.tasks.*: tasks,),
      CELESTY_WORKER_CONCURRENCY: 4 # Adjust the number of concurrent tasks as needed
    depends_on:
      - 'rabbitmq'
      - 'postgres'

  rabbitmq:
    image: 'rabbitmq:latest' # Use the specific RabbitMQ image you want to deploy
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASSWORD: password
    volumes:
      - 'rabbitmq_data:/var/lib/rabbitmq' # Persist RabbitMQ data

volumes:
  postgres_data:
  rabbitmq_data: