version: '3.8'

services:
  grimoire:
    image: 'grimoiredb/grimoirelab:latest' # or use a specific tag if needed
    container_name: grimoirelab
    ports:
      - "4000:4000" # Port where GrimoireLab will be accessible from the host
    volumes:
      - "./data/grimoire:/var/lib/grimoirelab" # Path to a local directory for GrimoireLab data (optional, depending on your storage needs)
      - "./config/grimoire:/etc/grimoirelab" # Path to a local directory for GrimoireLab configuration (optional, if you want to manage configs locally)
    environment:
      - "JUPYTERHUB_ENABLE=true"
      - "JUPYTERHUB_ADMIN_USER=_your_admin_user_" # Set an admin user for JupyterHub
      - "JUPYTERHUB_GENERATE_LOCAL_USER_DATA=True" # To generate user data on the fly (optional)
    environmentFiles:
      - "./config/grimoire/.env" # Path to a .env file with additional environment variables if needed
    depends_on:
      - postgres

  postgres:
    image: 'postgres:13' # Use the desired version of PostgreSQL
    container_name: grimoirelab_postgres
    volumes:
      - "./data/grimoire_postgres:/var/lib/postgresql" # Path to a local directory for PostgreSQL data
    environment:
      - "POSTGRES_DB=grimoirelab"
      - "POSTGRES_USER=grimoirelab"
      - "POSTGRES_PASSWORD=change_this_password" # Change this to a secure password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U grimoirelab"]
      timeout: 10s
      retries: 5

  rediscord:
    image: 'grimoiredb/rediscord:latest' # or use a specific tag if needed
    container_name: rediscord
    ports:
      - "6379:6379" # Redis port for Redis (optional, if you want to access it from the host)
    environment:
      - "REDIIS_HOST=postgres"
      - "JUPYTERHUB_URL=http://grimoirelab:4000" # Set JupyterHub URL (optional, but recommended for syncing with GitHub)

networks:
  default:
    driver: bridge